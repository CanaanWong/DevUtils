// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: rootProject.file('file/gradle/config.gradle')

buildscript {

    repositories {

        // AliRepo 阿里仓库服务 https://maven.aliyun.com/mvn/view
        // 阿里 Gradle 源
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/jcenter' }

        google()
        jcenter()

        // JitPack Maven
        maven { url 'https://jitpack.io' }

        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.0'
        // mavan
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        // bintray
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        // greendao
        classpath 'org.greenrobot:greendao-gradle-plugin:3.3.0'
        // kotlin
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.10"
    }
}

allprojects {
    repositories {
        // 所有的 model 都优先使用阿里源
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/jcenter' }

        google()
        jcenter()

        // JitPack Maven
        maven { url 'https://jitpack.io' }

        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }

//    gradle.projectsEvaluated {
//        tasks.withType(JavaCompile) {
//            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
//        }
//    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// 全局编码设置
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// =================
// = config.gradle =
// =================

import groovy.json.JsonOutput

// 存储 config.gradle json 数据
task saveConfigGradleJSON() {
    println deps.toString()
    // 获取 ext.deps json 数据
    def depsJSON = JsonOutput.toJson(deps)
    // 格式化 JSON
    def formatJSON = JsonOutput.prettyPrint(depsJSON)
    // 写入 ext.deps 配置信息
    def file = new File("file/json/deps.json")
    file.withPrintWriter { it.print(formatJSON) }
}

// 生成 deps dependencies gradle
task generateDepsDependencies() {
    def newline = System.getProperty("line.separator")
    def newline2 = newline + newline
    def importSymbol = "implementation"
    // 拼接 string
    def builder = new StringBuilder()
    builder.append("dependencies {")
    for (String module : deps.keySet()) {
        builder.append("${newline2}\t// = ${module} =${newline}")
        // 循环拼接处理
        def valueMaps = deps.get(module) as LinkedHashMap<String, String>
        for (String name : valueMaps.keySet()) {
            def value = valueMaps.get(name)
            builder.append("${newline}\t// ${name}")
            builder.append("${newline}\t${importSymbol} '${value}'")
        }
    }
    builder.append("${newline}}")
    // 写入 ext.deps 配置信息
    def file = new File("file/json/deps_dependencies.gradle")
    file.withPrintWriter { it.print(builder.toString()) }
}